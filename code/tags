!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACTION_H	action.h	/^#define ACTION_H$/;"	d
Ace	cards.h	/^    Ace$/;"	e	enum:Value
Action	action.h	/^        Action() { action = fo; bet = 0; }$/;"	f	class:Action
Action	action.h	/^        Action(Option act, double size) { action = act; bet = size; }$/;"	f	class:Action
Action	action.h	/^class Action$/;"	c
CARDS_H	cards.h	/^#define CARDS_H$/;"	d
C_L_ARGS	main.cpp	/^#define C_L_ARGS /;"	d	file:
Card	cards.cpp	/^Card::Card(Suit s, Value v)$/;"	f	class:Card
Card	cards.h	/^class Card$/;"	c
Clubs	cards.h	/^    Clubs=0, \/\/ utf encoding: \\u2667$/;"	e	enum:Suit
Deck	cards.cpp	/^Deck::Deck()$/;"	f	class:Deck
Deck	cards.h	/^class Deck$/;"	c
Diamonds	cards.h	/^    Diamonds, \/\/ utf encoding: \\u2662$/;"	e	enum:Suit
Eight	cards.h	/^    Eight,$/;"	e	enum:Value
Five	cards.h	/^    Five,$/;"	e	enum:Value
Flush	hands.h	/^    Flush,$/;"	e	enum:Hand
Four	cards.h	/^    Four, $/;"	e	enum:Value
Four_Kind	hands.h	/^    Four_Kind,$/;"	e	enum:Hand
Full_House	hands.h	/^    Full_House,$/;"	e	enum:Hand
GAME_MASTER_H	game_master.h	/^#define GAME_MASTER_H$/;"	d
Game_Master	game_master.h	/^        Game_Master() { rounds_played = 0; }$/;"	f	class:Game_Master
Game_Master	game_master.h	/^class Game_Master$/;"	c
HANDS_H	hands.h	/^#define HANDS_H$/;"	d
Hand	hands.h	/^enum Hand {$/;"	g
Hand_Value	hands.h	/^        Hand_Value() { hand = High_Card; top_value = Two; }$/;"	f	class:Hand_Value
Hand_Value	hands.h	/^        Hand_Value(Hand h, Value v) { hand = h; top_value = v; }$/;"	f	class:Hand_Value
Hand_Value	hands.h	/^class Hand_Value$/;"	c
Hand_order	hands.cpp	/^int Hand_order (Hand_Value a, Hand_Value b)$/;"	f
Hearts	cards.h	/^    Hearts \/\/ utf encoding: \\u2661$/;"	e	enum:Suit
High_Card	hands.h	/^    High_Card$/;"	e	enum:Hand
Jack	cards.h	/^    Jack,$/;"	e	enum:Value
King	cards.h	/^    King,$/;"	e	enum:Value
MAX_PLAYERS	ring.h	/^#define MAX_PLAYERS /;"	d
NUM_CARDS	cards.h	/^#define NUM_CARDS /;"	d
NUM_GAMES	main.cpp	/^#define NUM_GAMES /;"	d	file:
NUM_SUITS	cards.h	/^#define NUM_SUITS /;"	d
NUM_VALUES	cards.h	/^#define NUM_VALUES /;"	d
Nine	cards.h	/^    Nine,$/;"	e	enum:Value
One_Pair	hands.h	/^    One_Pair,$/;"	e	enum:Hand
Option	action.h	/^enum Option$/;"	g
PLAYER_H	player.h	/^#define PLAYER_H$/;"	d
Player	player.cpp	/^Player::Player()$/;"	f	class:Player
Player	player.cpp	/^Player::Player(std::string n, double chips)$/;"	f	class:Player
Player	player.h	/^class Player$/;"	c
Queen	cards.h	/^    Queen,$/;"	e	enum:Value
RING_H	ring.h	/^#define RING_H$/;"	d
Ring	ring.h	/^        Ring (std::vector<Player> p)$/;"	f	class:Ring
Ring	ring.h	/^class Ring$/;"	c
Seven	cards.h	/^    Seven,$/;"	e	enum:Value
Six	cards.h	/^    Six,$/;"	e	enum:Value
Spades	cards.h	/^    Spades, \/\/ utf encoding: \\u2664$/;"	e	enum:Suit
Straight	hands.h	/^    Straight,$/;"	e	enum:Hand
Straight_Flush	hands.h	/^    Straight_Flush=0,$/;"	e	enum:Hand
Suit	cards.h	/^enum Suit { $/;"	g
TERMINAL	main.cpp	/^#define TERMINAL /;"	d	file:
Ten	cards.h	/^    Ten,$/;"	e	enum:Value
Three	cards.h	/^    Three,$/;"	e	enum:Value
Three_Kind	hands.h	/^    Three_Kind,$/;"	e	enum:Hand
Two	cards.h	/^    Two=0,$/;"	e	enum:Value
Two_Pair	hands.h	/^    Two_Pair,$/;"	e	enum:Hand
Value	cards.h	/^enum Value {$/;"	g
action	action.h	/^        Option action;$/;"	m	class:Action
add_player	ring.cpp	/^void Ring::add_player(Player player)$/;"	f	class:Ring
add_player_to_ring	game_master.h	/^        void add_player_to_ring(Ring* ring, Player player) { ring->add_player(player); }$/;"	f	class:Game_Master
add_to_pot	ring.h	/^        void add_to_pot(double size) { pot_size = pot_size + size; }$/;"	f	class:Ring
all_players_acted	play_round.cpp	/^int all_players_acted (Ring *ring)$/;"	f
be	action.h	/^    be,$/;"	e	enum:Option
bet	action.h	/^        double bet;$/;"	m	class:Action
bet_size	ring.h	/^        double bet_size;$/;"	m	class:Ring
big_blind	ring.h	/^        double big_blind; \/\/ Serves as minimum bet as well$/;"	m	class:Ring
burnt_cards	ring.h	/^        std::vector<Card> burnt_cards;$/;"	m	class:Ring
ca	action.h	/^    ca,$/;"	e	enum:Option
call	action.h	/^        void call(double size) { action = ca; bet = size; }$/;"	f	class:Action
card_fn	ring.h	/^        void (Ring::*card_fn)(Deck*); \/\/ this the function pointer$/;"	m	class:Ring
cards	cards.h	/^        std::vector<Card> cards;$/;"	m	class:Deck
ch	action.h	/^    ch$/;"	e	enum:Option
check	action.h	/^        void check() { action = ch; bet = 0; }$/;"	f	class:Action
chip_count	player.h	/^        double chip_count;$/;"	m	class:Player
choose_action	player.cpp	/^Action Player::choose_action(double bet)$/;"	f	class:Player
choose_winner	game_master.cpp	/^Player Game_Master::choose_winner(Ring* ring, std::vector<Player>* players)$/;"	f	class:Game_Master
clear_all_cards	ring.cpp	/^void Ring::clear_all_cards()$/;"	f	class:Ring
clear_cards	cards.h	/^        void clear_cards() { cards.empty(); }$/;"	f	class:Deck
clear_pocket_cards	player.h	/^        void clear_pocket_cards() { if (pocket_cards.size() > 0) pocket_cards.clear(); }$/;"	f	class:Player
community_cards	ring.h	/^        std::vector<Card> community_cards;$/;"	m	class:Ring
curr_in_pot	player.h	/^        double curr_in_pot; \/\/ Need to keep up with how much to contribute$/;"	m	class:Player
deal_cards	ring.cpp	/^void Ring::deal_cards(Deck* cards)$/;"	f	class:Ring
double_blinds	ring.h	/^        void double_blinds() { big_blind = 2 * big_blind; }$/;"	f	class:Ring
execute_action	game_master.cpp	/^void Game_Master::execute_action(Ring* ring, Player* p, Action action)$/;"	f	class:Game_Master
find_hand	hands.cpp	/^Hand_Value find_hand(std::vector<Card> cards)$/;"	f
find_player_position	game_master.cpp	/^int find_player_position(Ring *ring, std::string name)$/;"	f
flop	ring.cpp	/^void Ring::flop(Deck* cards)$/;"	f	class:Ring
fo	action.h	/^    fo=0,$/;"	e	enum:Option
fold	action.h	/^        void fold() { action = fo; bet = 0; }$/;"	f	class:Action
fold_player	game_master.cpp	/^void Game_Master::fold_player(Ring* ring, Player* p, double size)$/;"	f	class:Game_Master
get_action	action.h	/^        Option get_action() { return action; }$/;"	f	class:Action
get_actions	game_master.cpp	/^Action Game_Master::get_actions(Ring* ring, Player p)$/;"	f	class:Game_Master
get_bet	action.h	/^        double get_bet() { return bet; }$/;"	f	class:Action
get_bet_size	ring.h	/^        double get_bet_size() { return bet_size; }$/;"	f	class:Ring
get_big_blind	ring.h	/^        double get_big_blind() { return big_blind; }$/;"	f	class:Ring
get_chip_count	player.h	/^        double get_chip_count() { return chip_count; }$/;"	f	class:Player
get_community_cards	ring.h	/^        std::vector<Card> *get_community_cards() { return &community_cards; }$/;"	f	class:Ring
get_curr_in_pot	player.h	/^        double get_curr_in_pot() { return curr_in_pot; } $/;"	f	class:Player
get_hand	hands.h	/^        Hand get_hand() { return hand; }$/;"	f	class:Hand_Value
get_live_players	ring.h	/^        int get_live_players() { return live_players; }$/;"	f	class:Ring
get_name	player.h	/^        std::string get_name() { return name; }$/;"	f	class:Player
get_number	cards.h	/^        char get_number() { return number; }$/;"	f	class:Card
get_player	ring.h	/^        Player* get_player(int i) { return &players[i]; }$/;"	f	class:Ring
get_player_chip_count	ring.h	/^        double get_player_chip_count(int i) { return players[i].get_chip_count(); }$/;"	f	class:Ring
get_player_hand	player.h	/^        Hand_Value get_player_hand() { return hand; }$/;"	f	class:Player
get_players_at_table	ring.h	/^        std::vector<Player> *get_players_at_table() { return &players; }$/;"	f	class:Ring
get_pocket_cards	player.h	/^        std::vector<Card> get_pocket_cards() { return pocket_cards; }$/;"	f	class:Player
get_pot_size	ring.h	/^        double get_pot_size() { return pot_size; }$/;"	f	class:Ring
get_rounds_played	game_master.h	/^        int get_rounds_played() { return rounds_played; }$/;"	f	class:Game_Master
get_status	player.h	/^        int get_status() { return status; }$/;"	f	class:Player
get_suit	cards.h	/^        Suit get_suit() { return suit; }$/;"	f	class:Card
get_symbol	cards.h	/^        std::string get_symbol() { return symbol; }$/;"	f	class:Card
get_top_value	hands.h	/^        Value get_top_value() { return top_value; }$/;"	f	class:Hand_Value
get_value	cards.h	/^        Value get_value() { return value; }$/;"	f	class:Card
greater_card	hands.cpp	/^Value greater_card(Card a, Card b)$/;"	f
hand	hands.h	/^        Hand hand;$/;"	m	class:Hand_Value
hand	player.h	/^        Hand_Value hand;$/;"	m	class:Player
increase_round_count	game_master.h	/^        void increase_round_count(int num) { rounds_played = rounds_played + num; }$/;"	f	class:Game_Master
is_flush	hands.cpp	/^int is_flush(int *num_suit)$/;"	f
is_pair	hands.cpp	/^int is_pair(int *num_vals)$/;"	f
is_straight	hands.cpp	/^int is_straight(int *num_vals)$/;"	f
is_three_kind	hands.cpp	/^int is_three_kind(int *num_vals)$/;"	f
is_two_pair	hands.cpp	/^int is_two_pair (int *num_vals)$/;"	f
is_winner	ring.cpp	/^int Ring::is_winner()$/;"	f	class:Ring
live_players	ring.h	/^        int live_players; \/\/ This starts as the total table then reduces to 1$/;"	m	class:Ring
longest_increasing_sequence	hands.cpp	/^int longest_increasing_sequence(int *vals_list)$/;"	f
main	main.cpp	/^int main(int argc, char** argv)$/;"	f
make_bet	action.h	/^        void make_bet(double size) { action = be; bet = size; }$/;"	f	class:Action
max_of_one_card	hands.cpp	/^int max_of_one_card(int *num_vals)$/;"	f
max_players	ring.h	/^        int max_players = MAX_PLAYERS; \/\/ No question$/;"	m	class:Ring
money_moves	game_master.cpp	/^void Game_Master::money_moves(Ring* ring, Player* p, double size)$/;"	f	class:Game_Master
name	player.h	/^        std::string name;$/;"	m	class:Player
num_cards	cards.h	/^        int num_cards() { return cards.size(); }$/;"	f	class:Deck
num_live_players	ring.h	/^        int num_live_players() { return live_players; }$/;"	f	class:Ring
num_players	ring.h	/^        int num_players() { return players.size(); }$/;"	f	class:Ring
number	cards.h	/^        char number; \/\/ Letter to represent the card$/;"	m	class:Card
play_round	play_round.cpp	/^void Game_Master::play_round(Ring* ring, int max_rounds, int terminal_output)$/;"	f	class:Game_Master
player_Hand_sorting	game_master.cpp	/^int player_Hand_sorting(Player a, Player b)$/;"	f
players	ring.h	/^        std::vector<Player> players;$/;"	m	class:Ring
pocket_cards	player.h	/^        std::vector<Card> pocket_cards;$/;"	m	class:Player
pop_card	cards.cpp	/^Card Deck::pop_card()$/;"	f	class:Deck
pop_pocket_card	player.h	/^        void pop_pocket_card() { pocket_cards.pop_back(); }$/;"	f	class:Player
pot_size	ring.h	/^        double pot_size;$/;"	m	class:Ring
prepare_round	ring.cpp	/^void Ring::prepare_round()$/;"	f	class:Ring
pretty_card_print	cards.cpp	/^void pretty_card_print(std::vector<Card> cards)$/;"	f
print_card	cards.cpp	/^void Card::print_card(int method)$/;"	f	class:Card
print_deck	cards.cpp	/^void Deck::print_deck(int method)$/;"	f	class:Deck
print_player	player.cpp	/^void Player::print_player(int method)$/;"	f	class:Player
print_summary	ring.cpp	/^void Ring::print_summary()$/;"	f	class:Ring
push_card	cards.h	/^        void push_card(Card card) { cards.push_back(card); } \/\/ Only want us to be able to add cards$/;"	f	class:Deck
push_card_to_hand	player.h	/^        void push_card_to_hand(Card card) { pocket_cards.push_back(card); } };$/;"	f	class:Player
ra	action.h	/^    ra,$/;"	e	enum:Option
raise	action.h	/^        void raise(double size) { action = ra; bet = size; }$/;"	f	class:Action
reduce_chip_count	player.h	/^        void reduce_chip_count(double chips) { chip_count = chip_count - chips; }$/;"	f	class:Player
remove_broke_players	ring.cpp	/^void Ring::remove_broke_players()$/;"	f	class:Ring
reset_live_player_status	play_round.cpp	/^void reset_live_player_status(Ring* ring)$/;"	f
reset_players_curr_in_pot	game_master.cpp	/^void reset_players_curr_in_pot(Ring* ring)$/;"	f
reset_pot_size	ring.h	/^        void reset_pot_size() { pot_size = 0; }$/;"	f	class:Ring
reshuffle_positions	ring.cpp	/^void Ring::reshuffle_positions()$/;"	f	class:Ring
return_winning_hand	hands.cpp	/^std::vector<Card> return_winning_hand(std::vector<Card> cards, $/;"	f
river	ring.cpp	/^void Ring::river(Deck* cards)$/;"	f	class:Ring
rounds_played	game_master.h	/^        int rounds_played;$/;"	m	class:Game_Master
set_bet_size	ring.h	/^        void set_bet_size(double size) { bet_size = size; }$/;"	f	class:Ring
set_chip_count	player.h	/^        void set_chip_count(double chips) { chip_count = chips; }$/;"	f	class:Player
set_curr_in_pot	player.h	/^        void set_curr_in_pot(double bet) { curr_in_pot = bet; }$/;"	f	class:Player
set_hand	hands.h	/^        void set_hand(Hand h) { hand = h; }$/;"	f	class:Hand_Value
set_live_players	ring.h	/^        void set_live_players(int num) { live_players=num; }$/;"	f	class:Ring
set_player_hand	player.h	/^        void set_player_hand(Hand_Value h) { hand = h; }$/;"	f	class:Player
set_status	player.h	/^        void set_status(int num) { status = num; }$/;"	f	class:Player
set_top_value	hands.h	/^        void set_top_value (Value v) { top_value = v; }$/;"	f	class:Hand_Value
show_down_time	game_master.h	/^        int show_down_time; \/\/ 0 unless it's time for the show down$/;"	m	class:Game_Master
simple_card_print	cards.cpp	/^void simple_card_print(std::vector<Card> pocket, std::vector<Card> cards)$/;"	f
status	player.h	/^        int status;$/;"	m	class:Player
suit	cards.h	/^        Suit suit;$/;"	m	class:Card
suit_order	hands.cpp	/^int suit_order (Card c, Card d)$/;"	f
suit_scan_cards	hands.cpp	/^void suit_scan_cards(std::vector<Card> cards, int *num_suit)$/;"	f
suits	cards.cpp	/^std::vector<std::string> suits = { "\\u2667", "\\u2662", "\\u2664", "\\u2661" };$/;"	v
symbol	cards.h	/^        std::string symbol; \/\/ This should have the unicode$/;"	m	class:Card
take_blinds	ring.cpp	/^void Ring::take_blinds()$/;"	f	class:Ring
take_from_pot	ring.h	/^        void take_from_pot(Player* p) { p->set_chip_count(p->get_chip_count() + pot_size); pot_size = 0; }$/;"	f	class:Ring
top_value	hands.h	/^        Value top_value; \/\/ So we can distinguish similar hands$/;"	m	class:Hand_Value
turn	ring.cpp	/^void Ring::turn(Deck* cards)$/;"	f	class:Ring
value	cards.h	/^        Value value;$/;"	m	class:Card
value_order	hands.cpp	/^int value_order (Card c, Card d)$/;"	f
value_scan_cards	hands.cpp	/^void value_scan_cards(std::vector<Card> cards, int *num_vals)$/;"	f
values	cards.cpp	/^std::string values = "23456789TJQKA";$/;"	v
